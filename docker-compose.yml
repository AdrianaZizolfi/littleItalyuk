version: '3.8'

services:
  gunicorn:
    build: .
    command: >
      sh -c "
      cd /app/client &&
      npm install &&
      npm run build &&
      mkdir -p /app/backend/static &&
      cp -r dist/* /app/backend/static/ &&
      cd /app/backend &&
      python manage.py collectstatic --noinput &&
      python manage.py migrate &&
      gunicorn website.wsgi:application --bind 0.0.0.0:8000 --workers 3
      "
    volumes:
      - ./backend:/app/backend
      - ./client:/app/client
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - DATABASE_HOST=postgres
    restart: unless-stopped

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - gunicorn
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: >
      sh -c "trap exit TERM; while :; do sleep 12h & wait $${!}; certbot renew; done"


  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: